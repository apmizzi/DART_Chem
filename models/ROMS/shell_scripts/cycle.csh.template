#!/bin/tcsh
#
# DART software - Copyright 2004 - 2011 UCAR. This open source software is
# provided by UCAR, "as is", without charge, subject to all terms of use at
# http://www.image.ucar.edu/DAReS/DART/DART_download
#
# $Id: run_1day.csh 10638 2016-08-16 14:48:52Z nancy $
#=============================================================================
#
#
#=============================================================================
# This block of directives constitutes the preamble for the LSF queuing system
# LSF is used on the IMAGe Linux cluster 'coral'
# LSF is used on the IBM   'bluefire'
#
# the normal way to submit to the queue is:    bsub < roms_ensemble.csh
#
# an explanation of the most common directives follows:
# -J Job_name
# -o STDOUT_filename
# -e STDERR_filename
# -P account_code_number
# -q queue    cheapest == [standby, economy, (regular,debug), premium] == $$$$
# -n number of MPI processes (not nodes)
# -W hh:mm  wallclock time (required on some systems)
#=============================================================================
#BSUB -J roms_ensemble
#BSUB -o roms_ensemble.%J.log
#BSUB -P P86850054
#BSUB -q small
#BSUB -n 16
#BSUB -R "span[ptile=16]"
#BSUB -W 1:00
#BSUB -N -u ${USER}@ucar.edu
#
#=============================================================================
## This block of directives constitutes the preamble for the PBS queuing system
## PBS is used on the CGD Linux cluster 'bangkok'
## PBS is used on the CGD Linux cluster 'calgary'
##
## the normal way to submit to the queue is:    qsub run_roms_ensemble.csh
##
## an explanation of the most common directives follows:
## -N     Job name
## -r n   Declare job non-rerunable
## -e <arg>  filename for standard error
## -o <arg>  filename for standard out
## -q <arg>   Queue name (small, medium, long, verylong)
## -l nodes=xx:ppn=2   requests BOTH processors on the node. On both bangkok
##                     and calgary, there is no way to 'share' the processors
##                     on the node with another job, so you might as well use
##                     them both. (ppn == Processors Per Node)
#=============================================================================
#PBS -N roms_ensemble
#PBS -r n
#PBS -e roms_ensemble.err
#PBS -o roms_ensemble.log
#PBS -q dedicated
#PBS -l nodes=10:ppn=2

cd EXPERIMENT_DIRECTORY

@ instance = 0
foreach INSTANCE_DIRECTORY ( instance_???? )

   @ instance++

   cd ${INSTANCE_DIRECTORY}

   rm -f log_$instance.txt

   echo "advancing instance $instance at ..."`date`

   mpirun.lsf ../MyROMS_EXE MyROMS_STDIN >& log_$instance.txt

   # Check for successful completion - log file should have something like:
   # ROMS/TOMS: DONE... Tuesday - April 26, 2016 -  7:34:13 PM
   grep "ROMS/TOMS: DONE" log_$instance.txt > /dev/null
   if ($status != 0) then
      echo "ROMS instance $instance FAILED."
      echo "ROMS instance $instance FAILED."
      echo "ROMS instance $instance FAILED."
      exit 1
   endif

   # sometimes we need the full name, sometimes we need it without the extension
   set RST_FILE = MyRSTNAME
   set DAI_FILE = MyDAINAME
   set OBS_FILE = MyMODname
   set RST_ROOT = $RST_FILE:r
   set DAI_ROOT = $DAI_FILE:r
   set OBS_ROOT = $OBS_FILE:r

   # The ROMS restart file will be treated as the DART prior.
   # Create a ROMS POSTERIOR file that will be updated by DART and
   # tag the output with the model time.

   set OCEAN_TIME_STRING = `ncdump -v ocean_time ${DAI_FILE} | grep '^ ocean_time = '`
   set OCEAN_TIME = `echo $OCEAN_TIME_STRING | sed -e "s#[=;a-z_ ]##g"`

   set ROMS_PRIOR     = `printf %s_%04d_%d.nc ${RST_ROOT} $instance $OCEAN_TIME`
   set ROMS_POSTERIOR = `printf roms_posterior_%04d_%d.nc $instance $OCEAN_TIME`
   set ROMS_OBSFILE   = `printf %s_%04d_%d.nc ${OBS_ROOT} $instance $OCEAN_TIME`
   set SAFETY         = `printf roms_dai_original_%04d_%d.nc $instance $OCEAN_TIME`

   # THE SAFETY FILE COPY IS NOT FOR PRODUCTION RUNS AND SHOULD BE REMOVED.

   \cp -v ${DAI_FILE} ${SAFETY}          || exit 1
   \mv -v ${RST_FILE} ${ROMS_PRIOR}      || exit 1
   \mv -v ${DAI_FILE} ${ROMS_POSTERIOR}  || exit 1
   \mv -v ${OBS_FILE} ${ROMS_OBSFILE}    || exit 1

   echo
   echo "#---------------------------------------------------------------------"
   echo "# ROMS instance $instance completed at "`date`
   echo "#---------------------------------------------------------------------"
   echo

   cd ..

end

#==============================================================================
# Then we run DART on the ensemble of new states
#==============================================================================

# Remove the last set of DART run-time logs - if they exist.
\rm -f dart_log.out dart_log.nml

# Because convert_roms_obs and filter need bits from the ROMS model_mod,
# a (single) ROMS input file is required to satisfy 'static_init_model()'
# any one will do

ln -sf instance_0001/roms_posterior_????_${OCEAN_TIME}.nc MyDAINAME

# Collect all the ROMS_OBSFILEs into a list of input files
# and then convert them to a single DART observation sequence file.

ls -1 instance_*/${OBS_ROOT}*_${OCEAN_TIME}.nc  >! precomputed_files.txt

./convert_roms_obs  || exit 2

# 2) collect all the ROMS_RESTARTs into a list of input files for filter
# The io module will error out if the file_list.txt is too short.
# (make sure all instances of ROMS advanced successfully)
# DART (filter) will modify these files in-place.

ls -1 instance_*/roms_posterior_????_${OCEAN_TIME}.nc  >! restart_files.txt

mpirun.lsf ./filter || exit 3

#==============================================================================
# Prepare for the next model advance
#==============================================================================

# 1) filter will write out a 'new_dstart.txt' file with the new DSTART
#    that must be inserted into the CENTRALDIR/ocean_wc13.in

\mv -v PriorDiag_sd.nc    Prior_sd.${OCEAN_TIME}.nc
\mv -v PriorDiag_mean.nc  Prior_mean.${OCEAN_TIME}.nc
\mv -v sd.nc              Posterior_sd.${OCEAN_TIME}.nc
\mv -v mean.nc            Posterior_mean.${OCEAN_TIME}.nc
\mv -v obs_seq.final      obs_seq.final.${OCEAN_TIME}

set DSTART = `grep DSTART new_dstart.txt | sed -e 's/[A-Z, ]//g'`

# what inflation file

# the input.nml:&filter_nml:restart_out_file_name specifies the base filename
# for the updated (the posterior) model state. This base gets appended with
# a 4-digit instance number and then ".nc" This file must be pushed back into
# the appropriate directory.

@ instance = 0
foreach INSTANCE_DIRECTORY ( instance_???? )
   @ instance++

   cd ${INSTANCE_DIRECTORY}

   set posterior = `head -n $instance ../restart_files.txt | tail -n 1`
   set ROMS_INI = $posterior:t

   # use new state as starting point for next advance.
   # We want to preserve the unique posterior but want ROMS
   # to read from the (single) filename in ocean.in INIFILE

   # Update the ocean.in file with the new DSTART value

   \cp ../ocean.in.template ocean.in

   MySUBSTITUTE ocean.in MyDSTART   $DSTART
   MySUBSTITUTE ocean.in MyININAME  $ROMS_INI

   cd ..

end


#==============================================================================
# <next few lines under version control, do not edit>
# $URL: https://subversion.ucar.edu/DAReS/DART/branches/rma_trunk/models/ROMS/shell_scripts/run_1day.csh $
# $Revision: 10638 $
# $Date: 2016-08-16 08:48:52 -0600 (Tue, 16 Aug 2016) $

